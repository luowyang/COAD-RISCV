Write the C code to clarify what we should do:

int str2int(char[] str) {
    int result = 0;
    char *c = &str[0];
    while (*c != '\0') {
        if (*c < '0' || *c > '9') {
            return -1;
        }
        result = result * 10;
        result = result + (*c - '0');
        c++;
    }
    return result;
}

We map result to x5, c and str share x10. we use x6 to store *c, we also use x7 to store the constant 10 and x28 to stor 9
We will not store ASCII of '0' and '9' directly
Note that we have used the out-of-bound detection trick to reduce comparasions by substracting '0' from *c

str2int:
        addi x5, x0, 0      # result = 0
        addi x7, x0, 10     # x7 = 10
        addi x28, x0, 9     # x28 = 9
loop:   lbu  x6, 0(x10)     # x6 = *c
        beq  x6, x0, exit   # if *c == '\0' exit loop
        addi x6, x6, -48    # x6 = *c - '0'
        bltu x28, x6, error # if x6 < 0 || x6 > 9, jump to error procedure
        mul  x5, x5, x7     # result *= 10
        add  x5, x6, x5     # result += (*c - '0')
        addi x10, x10, 1    # c++, note that char is 1 byte
        jal  x0, loop       # jump back to loop
exit:   addi x10, x5, 0     # move result to x10
        jalr x0, 0(x1)      # return
error:  addi x10, x0, -1    # set return value to be -1
        jalr x0, 0(x1)      # return